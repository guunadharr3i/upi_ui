name: Build and Upload Flutter Web WAR to pCloud by Tag
run-name: Build WAR for ${{ inputs.tag_name || 'manual-run' }}

on:
  workflow_dispatch:
    inputs:
      tag_name:
        description: "Release tag to create & build (e.g., uat-v1.0.0)"
        required: true
        type: string
      base_ref:
        description: "Branch or commit to tag (defaults to main)"
        required: false
        default: main
        type: string
      overwrite_tag:
        description: "If tag exists, delete & recreate it"
        required: false
        default: false
        type: boolean

permissions:
  contents: write  # needed to push tags and create releases

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      env_name: ${{ steps.set_env.outputs.env_name }}
      tag_name: ${{ steps.extract.outputs.tag_name }}
      base_ref: ${{ steps.extract.outputs.base_ref }}
      overwrite_tag: ${{ steps.extract.outputs.overwrite_tag }}

    steps:
      - name: Validate input is non-empty
        if: ${{ inputs.tag_name == '' || inputs.tag_name == null }}
        run: |
          echo "ERROR: You must provide a tag name when running manually."
          exit 1

      - name: Validate tag format
        run: |
          if ! echo "${{ inputs.tag_name }}" | grep -Eq '^[A-Za-z0-9]+-'; then
            echo "ERROR: Tag should start with an environment prefix followed by a dash (e.g., uat-v1.0.0)."
            exit 1
          fi
          if ! echo "${{ inputs.tag_name }}" | grep -Eq '^[A-Za-z0-9._-]+$'; then
            echo "ERROR: Tag may only contain letters, numbers, dot, underscore, and dash."
            exit 1
          fi

      - name: Extract inputs
        id: extract
        run: |
          TAG_NAME="${{ inputs.tag_name }}"
          BASE_REF="${{ inputs.base_ref }}"
          OVERWRITE="${{ inputs.overwrite_tag }}"
          ENV_PREFIX="${TAG_NAME%%-*}"

          echo "env_prefix=$ENV_PREFIX" >> "$GITHUB_OUTPUT"
          echo "tag_name=$TAG_NAME"     >> "$GITHUB_OUTPUT"
          echo "base_ref=$BASE_REF"     >> "$GITHUB_OUTPUT"
          echo "overwrite_tag=$OVERWRITE" >> "$GITHUB_OUTPUT"

      - name: Set GitHub Environment name (uppercased)
        id: set_env
        run: |
          PREFIX='${{ steps.extract.outputs.env_prefix }}'
          ENV_NAME=$(echo "$PREFIX" | tr '[:lower:]' '[:upper:]')
          echo "env_name=$ENV_NAME" >> "$GITHUB_OUTPUT"

      - name: Show selected settings
        run: |
          echo "Environment:  ${{ steps.set_env.outputs.env_name }}"
          echo "Tag to make:  ${{ steps.extract.outputs.tag_name }}"
          echo "Base ref:     ${{ steps.extract.outputs.base_ref }}"
          echo "Overwrite:    ${{ steps.extract.outputs.overwrite_tag }}"

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment: ${{ needs.build.outputs.env_name }}

    steps:
      - name: Checkout repository (base ref)
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.build.outputs.base_ref || 'main' }}
          fetch-depth: 0
          persist-credentials: true  # required to push the tag with GITHUB_TOKEN

      - name: Create or update tag on the chosen ref
        env:
          TAG: ${{ needs.build.outputs.tag_name }}
          OVERWRITE: ${{ needs.build.outputs.overwrite_tag }}
        run: |
          set -euo pipefail
          git config user.name  "${GITHUB_ACTOR}"
          git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"

          echo "Fetching tags..."
          git fetch --tags --force

          if git rev-parse -q --verify "refs/tags/$TAG" >/dev/null; then
            if [ "$OVERWRITE" = "true" ]; then
              echo "Tag '$TAG' exists; overwriting as requested."
              git tag -d "$TAG" || true
              git push origin ":refs/tags/$TAG" || true
            else
              echo "ERROR: Tag '$TAG' already exists. Re-run with overwrite_tag=true to replace it."
              exit 1
            fi
          fi

          echo "Creating annotated tag: $TAG"
          git tag -a "$TAG" -m "Release $TAG"
          echo "Pushing tag to origin..."
          git push origin "$TAG"

          echo "Verifying remote tag exists..."
          git ls-remote --tags origin | grep -q "refs/tags/$TAG$" || { echo "Remote tag verification failed."; exit 1; }

          echo "Checking out the tag to lock build source..."
          git checkout -f "tags/$TAG"
          echo "At commit: $(git rev-parse --short HEAD)"

      - name: Set up Flutter (stable channel)
        uses: subosito/flutter-action@v2
        with:
          channel: "stable"   # pin with: flutter-version: '3.32.4' if needed

      - name: Flutter doctor (diagnostics)
        run: flutter doctor -v

      - name: Cache Pub dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            **/.dart_tool/package_config.json
          key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-pub-

      # STEP 1 — Patch web/index.html for CanvasKit + script tags (exact snippet you gave)
      - name: Step 1 — Patch index.html for CanvasKit
        shell: bash
        run: |
          set -euo pipefail
          FILE="web/index.html"
          if [ ! -f "$FILE" ]; then
            echo "ERROR: $FILE not found"; exit 1
          fi

          # Remove any existing flutterConfiguration block (idempotent)
          perl -0777 -i -pe 's|<script[^>]*>\s*window\.flutterConfiguration\s*=\s*\{[\s\S]*?\}\s*</script>\s*||gis' "$FILE"
          # Remove any existing flutter.js tag (idempotent)
          perl -0777 -i -pe 's|<script[^>]*src=["\x27]flutter\.js["\x27][^>]*>\s*</script>\s*||gis' "$FILE"
          # Ensure only one main.dart.js tag at the end of body
          perl -0777 -i -pe 's|<script[^>]*src=["\x27]main\.dart\.js["\x27][^>]*>\s*</script>\s*||gis' "$FILE"

          # Insert your exact <head> block right after the opening <head>
          perl -0777 -i -pe 's|<head>|<head>\n<script type="application/javascript">\n  window.flutterConfiguration = {\n    renderer: "canvaskit",\n    canvasKitBaseUrl: "canvaskit/"\n  }\n</script>\n<script src="flutter.js" defer></script>|i' "$FILE"

          # Ensure the body includes your main.dart.js tag (once)
          perl -0777 -i -pe 's|</body>|<script src="main.dart.js" type="application/javascript"></script>\n</body>|i' "$FILE"

          echo "Patched $FILE:"
          grep -n 'flutterConfiguration' "$FILE" || true
          grep -n 'flutter.js' "$FILE" || true
          grep -n 'main.dart.js' "$FILE" || true

      # STEP 2 — Clean, deps, build (runtime uses CanvasKit per index.html)
      - name: Step 2 — Clean, get packages, build web
        run: |
          flutter clean
          flutter pub get
          flutter build web --release

      - name: Create WAR File
        run: |
          cd build/web
          zip -r ../../UPIUI.war .
          cd ../..
          ls -lh UPIUI.war

      - name: Upload WAR to GitHub Release (attach to created tag)
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.build.outputs.tag_name }}
          files: UPIUI.war
          fail_on_unmatched_files: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install rclone
        run: curl -fsSL https://rclone.org/install.sh | sudo bash

      - name: Configure rclone for pCloud
        env:
          RCLONE_PCLOUD_TOKEN_JSON: ${{ secrets.RCLONE_PCLOUD_TOKEN_JSON }}
        run: |
          mkdir -p ~/.config/rclone
          {
            echo "[pcloud]"
            echo "type = pcloud"
            echo "token = ${RCLONE_PCLOUD_TOKEN_JSON}"
          } > ~/.config/rclone/rclone.conf
          rclone listremotes

      - name: Upload WAR to pCloud
        run: |
          ENV='${{ needs.build.outputs.env_name }}'
          TARGET_DIR="pcloud:/GitHubFlutterBuilds/${ENV}"
          rclone mkdir "$TARGET_DIR"
          rclone copy "UPIUI.war" "$TARGET_DIR" --progress --checksum --transfers=4
          rclone ls "$TARGET_DIR" | grep UPIUI.war || { echo "Upload not found in listing"; exit 1; }
